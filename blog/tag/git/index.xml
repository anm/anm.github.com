<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Alistair MacLeod, MM0HAI: Posts tagged git]]></title>

  <link href="http://mm0hai.net/blog/tag/git/index.xml" rel="self"/>
  <link href="http://mm0hai.net/"/>
  <updated>2012-09-28T03:19:21+01:00</updated>
  <id>http://mm0hai.net/blog/tag/git</id>
  <author>
    <name><![CDATA[Alistair N. MacLeod]]></name>
  </author>

  
  <entry>
    <title type="html"><![CDATA[Github Punchcard - Visualising Commit Times]]></title>
    <link href="http://mm0hai.net/blog/2011/03/11/github-punchcard.html"/>
    <link rel="payment" href="https://flattr.com/submit/auto?url=http://mm0hai.net/blog/2011/03/11/github-punchcard.html&amp;user_id=mm0hai" type="text/html" />
    <updated>2011-03-11T00:00:00+00:00</updated>
    <id>http://mm0hai.net/blog/2011/03/11/github-punchcard</id>
    <content type="html"><![CDATA[<p>I pushed my <a href="/life/life.html">HTML5 Game of Life</a> to
<a href="https://github.com/anm/HTML5-Game-of-Life/">github</a> today. I hadn't
noticed it before, but github generates some charts of commit
activity. This is what I got for my life project.</p>

<p><img width="680px" src="https://chart.googleapis.com/chart?chs=800x300&amp;chds=-1,24,-1,7,0,8&amp;chf=bg,s,efefef&amp;chd=t:0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23|0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7|1,0,2,0,3,0,0,2,0,0,0,0,0,8,0,0,0,0,6,0,0,0,0,2,3,0,0,0,0,0,0,0,0,0,7,5,0,0,0,0,0,4,3,0,2,0,0,0,1,0,0,0,0,2,2,1,0,0,0,5,0,0,0,0,5,0,0,0,0,0,0,1,0,0,0,0,1,2,0,0,0,1,0,0,0,0,2,1,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,2,0,3,1,1,1,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,1,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,2,1,1,1,3,3,2,1,0,1,2,0,2,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0&amp;chxt=x,y&amp;chm=o,333333,1,1.0,25.0&amp;chxl=0:||12am|1|2|3|4|5|6|7|8|9|10|11|12pm|1|2|3|4|5|6|7|8|9|10|11||1:||Sun|Mon|Tue|Wed|Thr|Fri|Sat|&amp;cht=s" alt="Punchcard showing commit times" title="Commit Activity by Day and Hour"/></p>

<p>My work is fairly evenly spread out, as I would expect. It looks like
I don't work much on Fridays or Saturday nights though. How strange.</p>

<p>I'm sure there are various fun things I could do with this sort of
data. Perhaps classify coders into categories like crepuscular,
diurnal, and nocturnal. What about matching up to people who like to
work at the same time? Or sleep at the same time. :-) I must make a
hacker dating site at once.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rewriting git commit message history across multiple branches]]></title>
    <link href="http://mm0hai.net/blog/2011/03/10/rewriting-git-commit-message-history.html"/>
    <link rel="payment" href="https://flattr.com/submit/auto?url=http://mm0hai.net/blog/2011/03/10/rewriting-git-commit-message-history.html&amp;user_id=mm0hai" type="text/html" />
    <updated>2011-03-10T00:00:00+00:00</updated>
    <id>http://mm0hai.net/blog/2011/03/10/rewriting-git-commit-message-history</id>
    <content type="html"><![CDATA[<p>The usual way to modify a previous git commit is to rebase interactively:</p>

<pre><code class="block">git rebase -i &lt;parent of oldest commit to edit&gt;</code></pre>


<p>This lets you modify the past commit and then it reapplies all commits
in the current branch since then on top of the modified commit.</p>

<p>This is all you need if you only have one branch. This time, however,
I had multiple branches splitting off after the commit I had to
change. When I used the rebase technique, the other branches remained
along with the unmodified commit they were based on.</p>

<p>I decided to try a different approach - I used <code>filter-branch</code>.</p>

<p><code>filter-branch</code> is very powerful and has many options. In this case, I
only wanted to rewrite a commit message, so I used the
<code>--msg-filter</code> option. This pipes each message to a shell
command and replaces it with the output of that command - perfect in
conjunction with sed. This method, unlike rebasing onto a single
edited commit, lets you programmatically edit all commit messages</p>

<p>One of the things I wanted to do was remove the comments that had been
added by git-svn. This command did the trick:</p>

<p><code class="block">git filter-branch -f --msg-filter 'sed "s/git-svn.*$//g"' -- --all</code></p>

<p>If you have any tags, you should add <code>--tag-name-filter cat</code>. This
updates the tags to point to the modified commits. It's more complicated if
the tags are signed - see the <code>git-fliter-branch</code> man page for
details.</p>

<p>Before this operation, git makes a backup, referred to as the
original. If there is already a backup git will, be default, refuse to
run the command, as doing so would overwrite the existing backup with
a new one. Use <code>-f</code> to force it.</p>

<p><code>-- --all</code> applies the filter to all branches. Alternatively, single
branch names can be given.</p>

<p>The above commands have taken care of modifying our commits but they
have not removed the originals, which have been kept as backups. To
purge these from the repository, you need to remove all references to
them and then run the garbage collector.</p>

<p>Edit these files to delete any lines which refer to the original commits:</p>

<pre class="block">
<code class="block">
.git/info/refs
.git/packed-refs
</code>
</pre>


<p>And do this:</p>

<pre class="block">
<code class="block">
rm -rf .git/refs/original
rm -rf .git/logs/
</code>
</pre>


<p>Now garbage collect:</p>

<pre class="block">
<code class="block">
git gc --prune=now
</code>
</pre>

]]></content>
  </entry>
  
</feed>
